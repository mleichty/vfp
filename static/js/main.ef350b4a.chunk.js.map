{"version":3,"sources":["components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Nav","React","useState","hoverGallery","changeHoverGallery","hoverResources","changeHoverResources","hoverAbout","changeHoverAbout","hoverDatabase","changeHoverDatabase","hoverContact","changeHoverContact","toggleHover2","toggleHover4","toggleHover1","toggleHover3","toggleHover5","gallery","borderTop","resources","about","display","database","contact","className","activeClassName","to","onMouseOver","onMouseOut","style","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPAyHeA,MAtHf,WAAe,MAUgCC,IAAMC,SAAS,gBAV/C,mBAUJC,EAVI,KAUUC,EAVV,OAWoCH,IAAMC,SAAS,gBAXnD,mBAWJG,EAXI,KAWYC,EAXZ,OAY4BL,IAAMC,SAAS,SAZ3C,mBAYJK,EAZI,KAYQC,EAZR,OAakCP,IAAMC,SAAS,SAbjD,mBAaJO,EAbI,KAaWC,EAbX,OAcgCT,IAAMC,SAAS,SAd/C,mBAcJS,EAdI,KAcUC,EAdV,KAgBPC,EAAe,WACM,iBAAjBV,EACAC,EAAmB,eACK,gBAAjBD,GACPC,EAAmB,iBAIvBU,EAAe,WACQ,iBAAnBT,EACAC,EAAqB,eACK,gBAAnBD,GACPC,EAAqB,iBAIzBS,EAAe,WACI,UAAfR,EACAC,EAAiB,QACK,SAAfD,GACPC,EAAiB,UAIrBQ,EAAe,WACO,UAAlBP,EACAC,EAAoB,QACK,SAAlBD,GACPC,EAAoB,UAIxBO,EAAe,WACM,UAAjBN,EACAC,EAAmB,QACK,SAAjBD,GACPC,EAAmB,UAIvBM,EAAU,CACVC,UAAW,cAAgBhB,GAG3BiB,EAAY,CACZD,UAAW,cAAgBd,GAG3BgB,EAAQ,CACRC,QAASf,GAGTgB,EAAW,CACXD,QAASb,GAGTe,EAAU,CACVF,QAASX,GAGb,OACI,yBAAKc,UAAU,OACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,yBACX,kBAAC,IAAD,CAASA,UAAU,0BACVC,gBAAgB,SAChBC,GAAG,SAASC,YAAab,EACzBc,WAAYd,GAHrB,SAIA,yBAAKU,UAAU,kBAAkBK,MAAOT,KAE5C,yBAAKI,UAAU,0BAA0BK,MAAOZ,GAC5C,kBAAC,IAAD,CAASO,UAAU,4BACVC,gBAAgB,SAChBC,GAAG,WAAWC,YAAaf,EAC3BgB,WAAYhB,GAHrB,YAKJ,yBAAKY,UAAU,wCACX,kBAAC,IAAD,CAASA,UAAU,0BACVC,gBAAgB,SAChBC,GAAG,YAAYC,YAAaZ,EAC5Ba,WAAYb,GAHrB,YAIA,yBAAKS,UAAU,kBAAkBK,MAAOP,KAE5C,yBAAKE,UAAU,0BAA0BK,MAAOV,GAC5C,kBAAC,IAAD,CAASK,UAAU,4BACVC,gBAAgB,SAChBC,GAAG,aAAaC,YAAad,EAC7Be,WAAYf,GAHrB,cAKJ,yBAAKW,UAAU,wCACX,kBAAC,IAAD,CAASA,UAAU,0BACVC,gBAAgB,SAChBC,GAAG,WAAWC,YAAaX,EAC3BY,WAAYZ,GAHrB,WAIA,yBAAKQ,UAAU,kBAAkBK,MAAON,MAGhD,wBAAIC,UAAU,cAAd,+BC/EGM,MA1Bf,WAEI,OACI,yBAAKN,UAAU,OASX,kBAAC,IAAD,KACI,kBAAC,EAAD,SCZIO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ef350b4a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n\r\n    // let textHover = React.createRef();\r\n    //\r\n    // function chbg(color) {\r\n    //     //need to somehow use refs instead of this\r\n    //     // document.getElementById('test').style.backgroundColor = color;\r\n    //     textHover.current.style.backgroundColor = color;\r\n    // }\r\n\r\n    const [hoverGallery, changeHoverGallery] = React.useState('var(--black)');\r\n    const [hoverResources, changeHoverResources] = React.useState('var(--black)');\r\n    const [hoverAbout, changeHoverAbout] = React.useState('block');\r\n    const [hoverDatabase, changeHoverDatabase] = React.useState('block');\r\n    const [hoverContact, changeHoverContact] = React.useState('block');\r\n\r\n    let toggleHover2 = () => {\r\n        if (hoverGallery === 'var(--black)') {\r\n            changeHoverGallery('var(--blue)');\r\n        } else if (hoverGallery === 'var(--blue)') {\r\n            changeHoverGallery('var(--black)');\r\n        }\r\n    };\r\n\r\n    let toggleHover4 = () => {\r\n        if (hoverResources === 'var(--black)') {\r\n            changeHoverResources('var(--blue)');\r\n        } else if (hoverResources === 'var(--blue)') {\r\n            changeHoverResources('var(--black)');\r\n        }\r\n    };\r\n\r\n    let toggleHover1 = () => {\r\n        if (hoverAbout === 'block') {\r\n            changeHoverAbout('none');\r\n        } else if (hoverAbout === 'none') {\r\n            changeHoverAbout('block');\r\n        }\r\n    };\r\n    // React.useEffect(\r\n    let toggleHover3 = () => {\r\n        if (hoverDatabase === 'block') {\r\n            changeHoverDatabase('none');\r\n        } else if (hoverDatabase === 'none') {\r\n            changeHoverDatabase('block');\r\n        }\r\n    };\r\n    // );\r\n    let toggleHover5 = () => {\r\n        if (hoverContact === 'block') {\r\n            changeHoverContact('none');\r\n        } else if (hoverContact === 'none') {\r\n            changeHoverContact('block');\r\n        }\r\n    };\r\n\r\n    let gallery = {\r\n        borderTop: \"90px solid \" + hoverGallery\r\n    };\r\n\r\n    let resources = {\r\n        borderTop: \"90px solid \" + hoverResources\r\n    };\r\n\r\n    let about = {\r\n        display: hoverAbout\r\n    };\r\n\r\n    let database = {\r\n        display: hoverDatabase\r\n    };\r\n\r\n    let contact = {\r\n        display: hoverContact\r\n    };\r\n\r\n    return (\r\n        <nav className=\"nav\">\r\n            <div className=\"nav__container\">\r\n                <div className=\"nav__tri nav__tri--up\">\r\n                    <NavLink className=\"nav__link nav__link--up\"\r\n                             activeClassName=\"active\"\r\n                             to=\"/about\" onMouseOver={toggleHover1}\r\n                             onMouseOut={toggleHover1}>About</NavLink>\r\n                    <div className=\"nav__tri--after\" style={about}></div>\r\n                </div>\r\n                <div className=\"nav__tri nav__tri--down\" style={gallery}>\r\n                    <NavLink className=\"nav__link nav__link--down\"\r\n                             activeClassName=\"active\"\r\n                             to=\"/gallery\" onMouseOver={toggleHover2}\r\n                             onMouseOut={toggleHover2}>Gallery</NavLink>\r\n                </div>\r\n                <div className=\"nav__tri nav__tri--up nav__tri--left\">\r\n                    <NavLink className=\"nav__link nav__link--up\"\r\n                             activeClassName=\"active\"\r\n                             to=\"/database\" onMouseOver={toggleHover3}\r\n                             onMouseOut={toggleHover3}>Database</NavLink>\r\n                    <div className=\"nav__tri--after\" style={database}></div>\r\n                </div>\r\n                <div className=\"nav__tri nav__tri--down\" style={resources}>\r\n                    <NavLink className=\"nav__link nav__link--down\"\r\n                             activeClassName=\"active\"\r\n                             to=\"/resources\" onMouseOver={toggleHover4}\r\n                             onMouseOut={toggleHover4}>Resources</NavLink>\r\n                </div>\r\n                <div className=\"nav__tri nav__tri--up nav__tri--left\">\r\n                    <NavLink className=\"nav__link nav__link--up\"\r\n                             activeClassName=\"active\"\r\n                             to=\"/contact\" onMouseOver={toggleHover5}\r\n                             onMouseOut={toggleHover5}>Contact</NavLink>\r\n                    <div className=\"nav__tri--after\" style={contact}></div>\r\n                </div>\r\n            </div>\r\n            <h1 className=\"nav__title\">The Virgin Forest Project</h1>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\nimport './App.css';\nimport Nav from \"./components/Nav\";\n\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            {/*<div className=\"App__fullscreen\">*/}\n                {/*<video loop muted autoPlay className=\"App__video\">*/}\n                {/*    <source src=\"https://player.vimeo.com/video/359859465\" type=\"video/mp4\"/>*/}\n                {/*</video>*/}\n                {/*<iframe src=\"https://player.vimeo.com/video/359859465\"*/}\n                {/*        className=\"App__video\" frameBorder=\"0\"*/}\n                {/*        allow=\"autoplay; fullscreen\" allowFullScreen></iframe>*/}\n            {/*</div>*/}\n            <Router>\n                <Nav/>\n                {/*<Switch>*/}\n                {/*  <Route path=\"/about\" component={About}></Route>*/}\n                {/*  <Route path=\"/gallery\" component={Gallery}></Route>*/}\n                {/*  <Route path=\"/database\" component={Database}></Route>*/}\n                {/*  <Route path=\"/resources\" component={Resources}></Route>*/}\n                {/*  <Route path=\"/contact\" component={Contact}></Route>*/}\n                {/*</Switch>*/}\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}